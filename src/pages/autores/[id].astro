---
import MainLayout from "@/layouts/MainLayout.astro";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import { SITE } from "@data/constants";
import CardBlog from "@components/ui/cards/CardBlog.astro";
import Icon from "@components/ui/icons/Icon.astro";

export async function getStaticPaths() {
  const authors = await getCollection("authors");
  return authors.map((author) => ({
    params: { id: author.id },
    props: { author },
  }));
}

const { author } = Astro.props;

// Get blog posts by this author
const blogPosts = await getCollection("blog", ({ data }) => {
  return data.author === author.id && !data.noindex;
});

const sortedPosts = blogPosts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

const pageTitle = `${author.data.name} | Autores | ${SITE.title}`;
const metaDescription = `Conoce a ${author.data.name}, ${author.data.role} en ${author.data.company || 'Artxe Web'}. ${author.data.bio}`;
const ogTitle = `${author.data.name} | Autor | ${SITE.title}`;
---

<MainLayout
  title={pageTitle}
  customDescription={metaDescription}
  customOgTitle={ogTitle}
  structuredData={{
    "@context": "https://schema.org",
    "@type": "Person",
    "@id": `https://artxeweb.com/autores/${author.id}`,
    name: author.data.name,
    description: author.data.bio,
    jobTitle: author.data.role,
    worksFor: {
      "@type": "Organization",
      name: author.data.company || "Artxe Web",
    },
    url: `https://artxeweb.com/autores/${author.id}`,
    image: author.data.avatar.src,
    sameAs: [
      author.data.website,
      author.data.twitter,
      author.data.linkedin,
    ].filter(Boolean),
    mainEntityOfPage: {
      "@type": "WebPage",
      "@id": `https://artxeweb.com/autores/${author.id}`,
    },
  }}
>
  <section class="mx-auto max-w-4xl px-4 py-10 sm:px-6 lg:px-8 lg:py-14">
    <!-- Author Header -->
    <div class="mb-10 text-center">
      <div class="mb-6">
        <img
          src={author.data.avatar}
          alt={author.data.avatarAlt}
          class="mx-auto h-32 w-32 rounded-full object-cover"
          loading="eager"
        />
      </div>
      
      <h1 class="mb-4 text-3xl font-bold text-neutral-800 dark:text-neutral-200 md:text-4xl">
        {author.data.name}
      </h1>
      
      <p class="mb-2 text-lg font-medium text-orange-400 dark:text-orange-300">
        {author.data.role}
      </p>
      
      {author.data.company && (
        <p class="mb-4 text-neutral-600 dark:text-neutral-400">
          {author.data.company}
        </p>
      )}
      
      <p class="mx-auto max-w-2xl text-lg text-neutral-600 dark:text-neutral-400">
        {author.data.bio}
      </p>
      
      <!-- Social Links -->
      {(author.data.website || author.data.twitter || author.data.linkedin || author.data.email) && (
        <div class="mt-6 flex justify-center space-x-4">
          {author.data.website && (
            <a
              href={author.data.website}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center gap-x-2 rounded-lg px-3 py-2 text-sm font-medium text-neutral-600 hover:text-orange-400 dark:text-neutral-400 dark:hover:text-orange-300"
            >
              <Icon name="earth" />
              Sitio web
            </a>
          )}
          
          {author.data.twitter && (
            <a
              href={author.data.twitter}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center gap-x-2 rounded-lg px-3 py-2 text-sm font-medium text-neutral-600 hover:text-orange-400 dark:text-neutral-400 dark:hover:text-orange-300"
            >
              <Icon name="x" />
              Twitter
            </a>
          )}
          
          {author.data.linkedin && (
            <a
              href={author.data.linkedin}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center gap-x-2 rounded-lg px-3 py-2 text-sm font-medium text-neutral-600 hover:text-orange-400 dark:text-neutral-400 dark:hover:text-orange-300"
            >
              <Icon name="linkedIn" />
              LinkedIn
            </a>
          )}
          
          {author.data.email && (
            <a
              href={`mailto:${author.data.email}`}
              class="inline-flex items-center gap-x-2 rounded-lg px-3 py-2 text-sm font-medium text-neutral-600 hover:text-orange-400 dark:text-neutral-400 dark:hover:text-orange-300"
            >
              <Icon name="envelopeOpen" />
              Email
            </a>
          )}
        </div>
      )}
    </div>

    <!-- Author's Articles -->
    {sortedPosts.length > 0 && (
      <div>
        <h2 class="mb-8 text-2xl font-bold text-neutral-800 dark:text-neutral-200">
          Artículos de {author.data.name}
        </h2>
        
        <div class="grid gap-6 sm:grid-cols-2">
          {sortedPosts.map((post) => (
            <CardBlog blogEntry={post} />
          ))}
        </div>
      </div>
    )}
    
    {sortedPosts.length === 0 && (
      <div class="text-center">
        <p class="text-neutral-600 dark:text-neutral-400">
          {author.data.name} aún no ha publicado artículos.
        </p>
      </div>
    )}
  </section>
</MainLayout>